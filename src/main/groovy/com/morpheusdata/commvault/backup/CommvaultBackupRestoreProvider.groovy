package com.morpheusdata.commvault.backup

import com.morpheusdata.commvault.CommvaultPlugin
import com.morpheusdata.commvault.utils.CommvaultBackupUtility
import com.morpheusdata.core.MorpheusContext
import com.morpheusdata.core.backup.BackupRestoreProvider
import com.morpheusdata.core.backup.response.BackupRestoreResponse
import com.morpheusdata.core.data.DataQuery
import com.morpheusdata.model.Backup
import com.morpheusdata.model.BackupRestore
import com.morpheusdata.model.BackupResult
import com.morpheusdata.model.Instance
import com.morpheusdata.model.Workload
import com.morpheusdata.response.ServiceResponse
import groovy.util.logging.Slf4j

@Slf4j
class CommvaultBackupRestoreProvider implements BackupRestoreProvider {

	CommvaultPlugin plugin
	MorpheusContext morpheusContext

	CommvaultBackupRestoreProvider(CommvaultPlugin plugin, MorpheusContext morpheusContext) {
		this.plugin = plugin
		this.morpheusContext = morpheusContext
	}

	/**
	 * Returns the Morpheus Context for interacting with data stored in the Main Morpheus Application
	 * @return an implementation of the MorpheusContext for running Future based rxJava queries
	 */
	MorpheusContext getMorpheus() {
		return morpheusContext
	}

	/**
	 * Add additional configurations to a backup restore. Morpheus will handle all basic configuration details, this is a
	 * convenient way to add additional configuration details specific to this backup restore provider.
	 * @param backupResultModel backup result to be restored
	 * @param config the configuration supplied by external inputs
	 * @param opts optional parameters used for configuration.
	 * @return a {@link ServiceResponse} object. A ServiceResponse with a false success will indicate a failed
	 * configuration and will halt the backup restore process.
	 */
	@Override
	ServiceResponse configureRestoreBackup(BackupResult backupResult, Map config, Map opts) {
		return ServiceResponse.success()
	}

	/**
	 * Build the configuration for the restored instance.
	 * @param backupResultModel backup result to be restored
	 * @param instanceModel the instance the backup was created from, if it still exists. Retained backups will not have a reference to the instance.
	 * @param restoreConfig the restore configuration generated by morpheus.
	 * @param opts optional parameters used for configuration.
	 * @return a {@link ServiceResponse} object. A ServiceResponse with a false success will indicate a failed
	 * configuration and will halt the backup restore process.
	 */
	@Override
	ServiceResponse getBackupRestoreInstanceConfig(BackupResult backupResult, Instance instanceModel, Map restoreConfig, Map opts) {
		return ServiceResponse.success()
	}

	/**
	 * Verify the backup restore is valid. Generally used to check if the backup and instance are both in a state
	 * compatible for executing the restore process.
	 * @param backupResultModel backup result to be restored
	 * @param opts optional parameters used for configuration.
	 * @return a {@link ServiceResponse} object. A ServiceResponse with a false success will indicate a failed
	 * configuration and will halt the backup restore process.
	 */
	@Override
	ServiceResponse validateRestoreBackup(BackupResult backupResult, Map opts) {
		return ServiceResponse.success()
	}

	/**
	 * Get restore options to configure the restore wizard. Although the {@link com.morpheusdata.core.backup.BackupProvider } and
	 * {@link com.morpheusdata.core.backup.BackupTypeProvider} supply configuration, there may be situations where the instance
	 * configuration will determine which options need to be presented in the restore wizard.
	 * <p>
	 * Available Restore options:
	 * 		<ul>
	 * 		 	<li>
	 * 		 	    restoreExistingEnabled (Boolean) -- determines the visibility of the restore to existing option
	 * 		 	</li>
	 * 		 	<li>
	 * 		 	  	restoreNewEnabled (Boolean) -- determines the visibility of the restore to new option
	 * 		 	</li>
	 * 		 	<li>
	 * 		 	  	name (String) -- default name of the restored instance
	 * 		 	</li>
	 * 		 	<li>
	 * 		 		hostname (String) -- default hostname of the restored instance
	 * 		 	</li>
	 * 		</ul>
	 *
	 * @param backupModel the backup
	 * @param opts optional parameters
	 * @return a {@link ServiceResponse} object. A ServiceResponse with a false success will indicate a failed
	 * configuration and will halt the backup restore process.
	 */
	@Override
	ServiceResponse getRestoreOptions(Backup backup, Map opts) {
		return ServiceResponse.success()
	}

	/**
	 * Execute the backup restore on the external system
	 * @param backupRestore restore to be executed
	 * @param backupResult refernce to the backup result
	 * @param backup reference to the backup associated with the backup result
	 * @param opts optional parameters
	 * @return a {@link ServiceResponse} object. A ServiceResponse with a false success will indicate a failed
	 * configuration and will halt the backup restore process.
	 */
	@Override
	ServiceResponse restoreBackup(BackupRestore backupRestore, BackupResult backupResult, Backup backup, Map opts) {
		log.info("Ray :: restoreBackup: backupRestore: ${backupRestore}")
		log.info("Ray :: restoreBackup: backupResult: ${backupResult}")
		log.info("Ray :: restoreBackup: backup: ${backup}")
		log.info("Ray :: restoreBackup: opts: ${opts}")
		ServiceResponse response = ServiceResponse.prepare(new BackupRestoreResponse(backupRestore))

		log.info("Ray :: restoreBackup: backupResult.externalId: ${backupResult.externalId}")
		log.info("Ray :: restoreBackup: backupResult.getConfigProperty('backupJobId'): ${backupResult.getConfigProperty('backupJobId')}")
		def backupJobId = backupResult.externalId ?: backupResult.getConfigProperty('backupJobId')
		log.info("Ray :: restoreBackup: backupJobId: ${backupJobId}")
		//log.info("Restoring backupResult {} - opts: {}", backupResult, opts)
		try {
			log.info("Ray :: restoreBackup: backup.containerId: ${backup.containerId}")
			def originalContainer = morpheusContext.services.workload.get(backup.containerId)
			log.info("Ray :: restoreBackup: originalContainer?.id: ${originalContainer?.id}")
			log.info("Ray :: restoreBackup: opts.containerId: ${opts.containerId}")
			log.info("Ray :: restoreBackup: backup?.containerId: ${backup?.containerId}")
			def containerId = opts.containerId ?: backup?.containerId
			log.info("Ray :: restoreBackup: containerId: ${containerId}")
			def backupProvider = backup.backupProvider
			log.info("Ray :: restoreBackup: backupProvider: ${backupProvider}")
			def authConfig = plugin.getAuthConfig(backupProvider)
			log.info("Ray :: restoreBackup: authConfig: ${authConfig}")
			def container = morpheusContext.services.workload.get(containerId)
			log.info("Ray :: restoreBackup: container: ${container}")
			def restoreConfig = backup.getConfigProperty("infrastructureConfig")
			log.info("Ray :: restoreBackup: restoreConfig: ${restoreConfig}")
			log.info("Ray :: restoreBackup: restoreConfig?.server: ${restoreConfig?.server}")

			log.info("Ray :: restoreBackup: containerId: ${containerId}")
			log.info("Ray :: restoreBackup: backup.containerId: ${backup.containerId}")
			if(containerId && containerId != backup.containerId) {
				opts.restoreNew = true
				backupRestore.containerId = containerId
				backupRestore.setConfigProperty("restoreType", "new")
				//backupRestore.save(flush:true)
				//morpheusContext.services.backup.backupRestore.save(backupRestore)
				log.info("Ray :: restoreBackup: container.server?.name: ${container.server?.name}")
				log.info("Ray :: restoreBackup: container.name: ${container.name}")
				log.info("Ray :: restoreBackup: restoreConfig.server?.name: ${restoreConfig?.server?.name}")
				opts.vmName = container.server?.name ?: container.name ?: restoreConfig?.server?.name
				log.info("Ray :: restoreBackup: opts.vmName: ${opts.vmName}")
				def parentServer = originalContainer?.server?.parentServer
				log.info("Ray :: restoreBackup: parentServer: ${parentServer}")
				log.info("Ray :: restoreBackup: restoreConfig.server?.parentServerId: ${restoreConfig?.server?.parentServerId}")
				if(!parentServer && restoreConfig?.server?.parentServerId) {
					parentServer = morpheusContext.services.computeServer.get(restoreConfig?.server?.parentServerId)
					log.info("Ray :: restoreBackup: parentServer1: ${parentServer}")
				}
				opts.esxHost = parentServer?.name
				log.info("Ray :: restoreBackup: opts.esxHost: ${opts.esxHost}")
				def resourcePool = originalContainer?.server?.resourcePool
				log.info("Ray :: restoreBackup: resourcePool: ${resourcePool}")
				log.info("Ray :: restoreBackup: restoreConfig.server?.resourcePoolId: ${restoreConfig?.server?.resourcePoolId}")
				if(!resourcePool && restoreConfig?.server?.resourcePoolId) {
					//resourcePool = ComputeZonePool.get(restoreConfig.server.resourcePoolId)
					resourcePool = morpheusContext.services.cloud.pool.get(restoreConfig?.server.resourcePoolId)
				}
				opts.resourcePool = resourcePool?.name
				log.info("Ray :: restoreBackup: opts.resourcePool: ${opts.resourcePool}")
				log.info("Ray :: restoreBackup: originalContainer?.server: ${originalContainer?.server}")
				log.info("Ray :: restoreBackup: originalContainer?.server?.volumes: ${originalContainer?.server?.volumes}")
				log.info("Ray :: restoreBackup: originalContainer?.server?.volumes?.getAt(0): ${originalContainer?.server?.volumes?.getAt(0)}")
				log.info("Ray :: restoreBackup: originalContainer?.server?.volumes?.getAt(0)?.datastore?.name: ${originalContainer?.server?.volumes?.getAt(0)?.datastore?.name}")
				def datastoreName = originalContainer?.server?.volumes?.getAt(0)?.datastore?.name
				log.info("Ray :: restoreBackup: datastoreName: ${datastoreName}")
				log.info("Ray :: restoreBackup: restoreConfig.server?.volumes?.getAt(0)?.datastoreName: ${restoreConfig?.server?.volumes?.getAt(0)?.datastoreName}")
				if(!datastoreName && restoreConfig?.server?.volumes?.getAt(0)?.datastoreName) {
					datastoreName = restoreConfig?.server?.volumes?.getAt(0)?.datastoreName
				}
				opts.datastore = datastoreName
				log.info("Ray :: restoreBackup: opts.datastore: ${opts.datastore}")
			}

			def vmExternalId = originalContainer?.server?.internalId ?: restoreConfig?.server?.internalId
			log.info("Ray :: restoreBackup: vmExternalId: ${vmExternalId}")

			log.info("Ray :: restoreBackup: backupResult.backup.backupJob: ${backupResult.backup.backupJob}")
			log.info("Ray :: restoreBackup: backupJobId: ${backupJobId}")
			log.info("Ray :: restoreBackup: opts: ${opts}")
			def results = CommvaultBackupUtility.restoreVM(authConfig, vmExternalId, backupResult.backup.backupJob, backupJobId, opts)
			log.info("Ray :: restoreBackup: results: ${results}")
			log.debug("restoreBackup result: {}", results)
			if(results.success) {
				//update instance status to restoring
				def instance = container?.instance
				instance?.status = Instance.Status.restoring.toString()
				log.info("Ray :: restoreBackup: instance?.status: ${instance?.status}")
				//instance?.save(flush:true)
				morpheusContext.services.instance.save(instance)
				container.status = Workload.Status.pending
				//container.save(flush:true)
				log.info("Ray :: restoreBackup: container.status: ${container.status}")
				morpheusContext.services.workload.save(container)
				container.server.status = Instance.Status.provisioning.toString()
				container.server.name = instance.name
				//container.server.save(flush:true)
				log.info("Ray :: restoreBackup: container.server.name: ${container.server.name}")
				morpheusContext.services.computeServer.save(container.server)
				updateBackupRestore(backupRestore, [status:BackupRestore.Status.IN_PROGRESS.toString(), externalStatusRef: results.restoreJobId])
				//rtn.status = instance.status
				response.data.updates = true
				response.success = true
			} else {
				updateBackupRestore(backupRestore, [status:BackupRestore.Status.FAILED.toString(), errorMessage: results.msg])
			}
			log.info("Ray :: restoreBackup: authConfig.token: ${authConfig.token}")
			log.info("Ray :: restoreBackup: authConfig.apiUrl: ${authConfig.apiUrl}")
			if (authConfig.token) {
				//logoutSession(authConfig)
				CommvaultBackupUtility.logout(authConfig.apiUrl, authConfig.token)
			}
		} catch(e) {
			log.error("restoreBackup error", e)
			response.error = "Failed to restore Commvault backup: ${e}"
		}
		return response
	}

	/**
	 * Periodically check for any updates to an in-progress restore. This method will be executed every 60 seconds for
	 * the restore while the restore has a status of `START_REQUESTED` or `IN_PROGRESS`. Any other status will indicate
	 * the restore has completed and does not need to be refreshed. The primary use case for this method is long-running
	 * restores to avoid consuming resources during the restore process.
	 * @param backupRestore the running restore
	 * @param backupResult backup result referencing the backup to be restored
	 * @return a {@link ServiceResponse} object. A ServiceResponse with a false success will indicate a failed
	 * configuration and will halt the backup restore process.
	 */
	@Override
	ServiceResponse refreshBackupRestoreResult(BackupRestore backupRestore, BackupResult backupResult) {
		// syncBackupRestoreResult -> finalizeBackup()
		log.info("Ray :: refreshBackupRestoreResult: backupRestore: ${backupRestore}")
		log.info("Ray :: refreshBackupRestoreResult: backupResult: ${backupResult}")
		ServiceResponse<BackupRestoreResponse> rtn = ServiceResponse.prepare(new BackupRestoreResponse(backupRestore))
		Backup backup = (Backup) morpheus.services.backup.find(new DataQuery().withFilter("id", backupResult.backup.id).withJoins(["backupProvider", "backupProvider.account"]))
		log.info("Ray :: refreshBackupRestoreResult: backup: ${backup}")
		log.info("Ray :: refreshBackupRestoreResult: backup?.id: ${backup?.id}")
		log.info("Ray :: refreshBackupRestoreResult: isCommvaultEnabled(backup): ${isCommvaultEnabled(backup)}")
		if(isCommvaultEnabled(backup)) {
			//syncBackupRestoreResult(backup, backupRestore, rtn)



			try{
				Map restoreSession = null
				def backupProvider = backup.backupProvider
				log.info("Ray :: syncBackupRestoreResult: backupProvider: ${backupProvider}")
				log.info("Ray :: syncBackupRestoreResult: backupProvider?.name: ${backupProvider?.name}")
				def authConfig = plugin.getAuthConfig(backupProvider)
				log.info("Ray :: syncBackupRestoreResult: authConfig: ${authConfig}")
				def restoreSessionId = backupRestore.externalStatusRef
				log.info("Ray :: syncBackupRestoreResult: restoreSessionId: ${restoreSessionId}")
				if(restoreSessionId) {
					def result = CommvaultBackupUtility.getJob(authConfig, restoreSessionId)
					log.info("Ray :: syncBackupRestoreResult: result: ${result}")
					restoreSession = result.result
					log.info("Ray :: syncBackupRestoreResult: restoreSession: ${restoreSession}")
					log.info("Ray :: syncBackupRestoreResult: authConfig1: ${authConfig}")
					if (authConfig.token) {
						CommvaultBackupUtility.logout(authConfig.apiUrl, authConfig.token)
					}
				}

				log.debug "restoreSession: ${restoreSession}"
				log.info("Ray :: syncBackupRestoreResult: restoreSession1: ${restoreSession}")
				if(restoreSession) {
					//update the restore with what we got back from commvault
					def restoreStatus = getBackupStatus(restoreSession.result)
					log.info("Ray :: syncBackupRestoreResult: restoreStatus: ${restoreStatus}")
					def startDate = restoreSession.startTime
					def endDate = restoreSession.endTime
					log.info("Ray :: syncBackupRestoreResult: startDate: ${startDate}")
					log.info("Ray :: syncBackupRestoreResult: endDate: ${endDate}")

					log.debug("restore session status update: ${restoreStatus}")
					if(restoreStatus == BackupResult.Status.SUCCEEDED.toString()) {
						log.info("Ray :: syncBackupRestoreResult: inside if")
						if(startDate) {
							def start = startDate?.toLong() * 1000
							rtn.data.backupRestore.startDate = start ? new Date(start) : null
						}
						//restore.save(flush:true)
						//morpheusContext.services.backup.backupRestore.save(backupRestore)
						finalizeRestore(backupRestore)
					} else {
						log.info("Ray :: syncBackupRestoreResult: inside else")
						if(startDate && endDate) {
							def start = startDate?.toLong() * 1000
							def end = endDate?.toLong() * 1000
							rtn.data.backupRestore.startDate = start ? new Date(start) : null
							rtn.data.backupRestore.endDate = end ? new Date(end) : null
							rtn.data.backupRestore.lastUpdated = new Date()
							rtn.data.backupRestore.duration = (start && end) ? (end - start) : 0
						}
						rtn.data.backupRestore.status = restoreStatus
						//restore.save(flush:true)
						//morpheusContext.services.backup.backupRestore.save(backupRestore)
					}
					updateInstanceStatus(backupRestore)
				} else {
					log.info("Ray :: syncBackupRestoreResult: inside restoreSession else")
					def syncAttempts = backupRestore.getConfigProperty('syncAttempts') ?: 0
					log.info("Ray :: syncBackupRestoreResult: syncAttempts: ${syncAttempts}")
					if(syncAttempts > 10) {
						rtn.data.backupRestore.status = BackupResult.Status.FAILED.toString()
						rtn.data.backupRestore.errorMessage = "Unable to fetch restore status from commvault"
						//restore.save()
						//morpheusContext.services.backup.backupRestore.save(backupRestore)
						updateInstanceStatus(backupRestore)
					} else {
						rtn.data.backupRestore.setConfigProperty('syncAttempts', syncAttempts + 1)
						//restore.save(flush:true)
						//morpheusContext.services.backup.backupRestore.save(backupRestore)
					}
				}
				log.info("Ray :: syncBackupRestoreResult: backupRestore?.status: ${backupRestore?.status}")
				//rtn.data = backupRestore
				rtn.data.updates = true
			} catch(Exception ex) {
				log.error("syncBackupRestoreResult error", ex)
			}
			return rtn
		}
		rtn.success = true
		log.info("Ray :: refreshBackupRestoreResult: rtn: ${rtn}")
		log.info("Ray :: refreshBackupRestoreResult: rtn?.data: ${rtn?.data}")
		return rtn
	}

	def updateBackupRestore(BackupRestore backupRestore, Map updates) {
		try {
			if(backupRestore) {
				def now = new Date()
				if(updates?.status) {
					backupRestore.status = updates?.status
				}
				if(updates?.status == BackupRestore.Status.FAILED.toString()) {
					backupRestore.errorMessage = updates?.errorMessage
				}
				if(updates.externalStatusRef) {
					backupRestore.externalStatusRef = updates.externalStatusRef
				}
				if(backupRestore.startDate) {
					backupRestore.duration = now.time - backupRestore.startDate?.time
				}
				if(backupRestore.status == BackupRestore.Status.FAILED.toString() || backupRestore.status ==  BackupRestore.Status.SUCCEEDED.toString()) {
					backupRestore.endDate = now
				}
				backupRestore.lastUpdated = now
				//backupRestore.save(flush:true)
				log.info("Ray :: restoreBackup: backupRestore.status: ${backupRestore.status}")
				log.info("Ray :: restoreBackup: updates: ${updates}")
				//morpheusContext.services.backup.backupRestore.save(backupRestore)
			}
		} catch(Exception e) {
			log.error("Failed to update restore result", e)
		}
	}

	def isCommvaultEnabled(backup) {
		backup?.backupProvider.enabled
	}

	//sync our backup result record with what is in commvault
	/*def syncBackupRestoreResult(Backup backup, BackupRestore backupRestore, rtn, Map restoreSession=null) {
		log.debug "syncBackupRestoreResult: backup:${backup}, restore:${backupRestore}, restoreSession:${restoreSession}"
		log.info("Ray :: syncBackupRestoreResult: backup:${backup}, restore:${backupRestore}, restoreSession:${restoreSession}")
		try{
			if(!restoreSession) {
				def backupProvider = backup.backupProvider
				log.info("Ray :: syncBackupRestoreResult: backupProvider: ${backupProvider}")
				log.info("Ray :: syncBackupRestoreResult: backupProvider?.name: ${backupProvider?.name}")
				def authConfig = plugin.getAuthConfig(backupProvider)
				log.info("Ray :: syncBackupRestoreResult: authConfig: ${authConfig}")
				def restoreSessionId = backupRestore.externalStatusRef
				log.info("Ray :: syncBackupRestoreResult: restoreSessionId: ${restoreSessionId}")
				if(restoreSessionId) {
					def result = CommvaultBackupUtility.getJob(authConfig, restoreSessionId)
					log.info("Ray :: syncBackupRestoreResult: result: ${result}")
					restoreSession = result.result
					log.info("Ray :: syncBackupRestoreResult: restoreSession: ${restoreSession}")
					log.info("Ray :: syncBackupRestoreResult: authConfig1: ${authConfig}")
					if (authConfig.token) {
						CommvaultBackupUtility.logout(authConfig.apiUrl, authConfig.token)
					}
				}
			}
			log.debug "restoreSession: ${restoreSession}"
			log.info("Ray :: syncBackupRestoreResult: restoreSession1: ${restoreSession}")
			if(restoreSession) {
				//update the restore with what we got back from commvault
				def restoreStatus = getBackupStatus(restoreSession.result)
				log.info("Ray :: syncBackupRestoreResult: restoreStatus: ${restoreStatus}")
				def startDate = restoreSession.startTime
				def endDate = restoreSession.endTime
				log.info("Ray :: syncBackupRestoreResult: startDate: ${startDate}")
				log.info("Ray :: syncBackupRestoreResult: endDate: ${endDate}")

				log.debug("restore session status update: ${restoreStatus}")
				if(restoreStatus == BackupResult.Status.SUCCEEDED.toString()) {
					log.info("Ray :: syncBackupRestoreResult: inside if")
					if(startDate) {
						def start = startDate?.toLong() * 1000
						backupRestore.startDate = start ? new Date(start) : null
					}
					//restore.save(flush:true)
					//morpheusContext.services.backup.backupRestore.save(backupRestore)
					finalizeRestore(backupRestore)
				} else {
					log.info("Ray :: syncBackupRestoreResult: inside else")
					if(startDate && endDate) {
						def start = startDate?.toLong() * 1000
						def end = endDate?.toLong() * 1000
						backupRestore.startDate = start ? new Date(start) : null
						backupRestore.endDate = end ? new Date(end) : null
						backupRestore.lastUpdated = new Date()
						backupRestore.duration = (start && end) ? (end - start) : 0
					}
					backupRestore.status = restoreStatus
					//restore.save(flush:true)
					//morpheusContext.services.backup.backupRestore.save(backupRestore)
				}
				updateInstanceStatus(backupRestore)
			} else {
				log.info("Ray :: syncBackupRestoreResult: inside restoreSession else")
				def syncAttempts = backupRestore.getConfigProperty('syncAttempts') ?: 0
				log.info("Ray :: syncBackupRestoreResult: syncAttempts: ${syncAttempts}")
				if(syncAttempts > 10) {
					backupRestore.status = BackupResult.Status.FAILED.toString()
					backupRestore.errorMessage = "Unable to fetch restore status from commvault"
					//restore.save()
					//morpheusContext.services.backup.backupRestore.save(backupRestore)
					updateInstanceStatus(backupRestore)
				} else {
					backupRestore.setConfigProperty('syncAttempts', syncAttempts + 1)
					//restore.save(flush:true)
					//morpheusContext.services.backup.backupRestore.save(backupRestore)
				}
			}
			log.info("Ray :: syncBackupRestoreResult: backupRestore?.status: ${backupRestore?.status}")
			//rtn.data = backupRestore
			rtn.data.updates = true
		} catch(Exception ex) {
			log.error("syncBackupRestoreResult error", ex)
		}
		return rtn
	}*/

	private getBackupStatus(String backupState) {
		def status
		log.info("Ray :: getBackupStatus: backupState: ${backupState}")
		if(backupState.toLowerCase().contains("completed") && backupState.toLowerCase().contains("errors")) {
			status = BackupResult.Status.SUCCEEDED_WARNING
		} else if(backupState.contains("Failed") || backupState.contains("errors")) {
			status = BackupResult.Status.FAILED
		} else if(["Interrupted", "Killed", "Suspend", "Suspend Pending", "Kill Pending"].contains(backupState) || backupState.contains("Killed")) {
			status = BackupResult.Status.CANCELLED
		} else if(["Running", "Waiting", "Pending"].contains(backupState) || backupState.contains("Running")) {
			status = BackupResult.Status.IN_PROGRESS
		} else if(backupState == "Completed" || backupState.contains("Completed")) {
			status = BackupResult.Status.SUCCEEDED
		} else if(backupState == "Queued") {
			status = BackupResult.Status.START_REQUESTED
		} else if(["Kill", "Pending" ,"Interrupt", "Pending"].contains(backupState)) {
			status = BackupResult.Status.CANCEL_REQUESTED
		}
		log.info("Ray :: getBackupStatus: status: ${status}")

		return status ? status.toString() : status
	}

	def updateInstanceStatus(BackupRestore backupRestore) {
		log.info("Ray :: updateInstanceStatus: backupRestore: ${backupRestore}")
		try {
			log.info("Ray :: updateInstanceStatus: backupRestore.containerId: ${backupRestore.containerId}")
			def targetContainer = morpheusContext.services.workload.get(backupRestore.containerId) //Container.get(restore.containerId)
			log.info("Ray :: updateInstanceStatus: targetContainer: ${targetContainer}")
			def instance = targetContainer?.instance
			log.info("Ray :: updateInstanceStatus: instance: ${instance}")

			log.info("Ray :: updateInstanceStatus: backupRestore.status: ${backupRestore.status}")
			if(backupRestore.status.equals(BackupRestore.Status.SUCCEEDED.name())) {
				log.info("Ray :: updateInstanceStatus: Inside if")
				instance?.status = Instance.Status.running
				//instance?.save(flush:true)
				if (instance) {
					morpheusContext.services.instance.save(instance)
				}
				targetContainer.server.status = "provisioned"
				targetContainer.status = Workload.Status.running
				targetContainer.userStatus = Workload.Status.running
				//targetContainer.save(flush:true)
				morpheusContext.services.workload.save(targetContainer)
			} else if(backupRestore.status.equals(BackupRestore.Status.FAILED.name())) {
				log.info("Ray :: updateInstanceStatus: Inside else if")
				instance?.status = Instance.Status.unknown
				//instance?.save(flush:true)
				if (instance) {
					morpheusContext.services.instance.save(instance)
				}
				targetContainer.server.status = Instance.Status.unknown.toString()
				targetContainer.status = Workload.Status.unknown
				//targetContainer.save(flush:true)
				morpheusContext.services.workload.save(targetContainer)
			}
		} catch (e) {
			log.error("Error updating instance status: ${e}", e)
		}
	}

	ServiceResponse finalizeRestore(BackupRestore backupRestore) {
		log.info("finalizeRestore: {}", backupRestore)
		log.info("Ray :: finalizeRestore: backupRestore: ${backupRestore}")
		def instance
		try {
			// Need to update the externalId as it has changed
			log.info("Ray :: finalizeRestore: backupRestore.containerId: ${backupRestore.containerId}")
			def targetWorkload = morpheusContext.services.workload.get(backupRestore.containerId)
			// def server = targetWorkload?.server

			log.info("Ray :: finalizeRestore: targetWorkload: ${targetWorkload}")
			morpheusContext.async.backup.backupRestore.finalizeRestore(targetWorkload)

			// do we still need this with finalizeRestore above?
			// if(server?.zone?.zoneType?.code == 'vmware' && server?.serverOs?.vendor == 'centos') {
			// 	log.debug("Finalizing restore: renew IP for CentOS VM.")
			// 	morpheus.executeCommandOnServer(server, "dhclient", null, null, null, null, null, null, null, true, true)
			// }
		} catch(e) {
			log.error("Error in finalizeRestore: ${e}", e)
			instance?.status = Instance.Status.failed
			//instance?.save(flush:true)
			if(instance) {
				morpheusContext.services.instance.save(instance)
			}
		}

		return ServiceResponse.success()
	}
}
